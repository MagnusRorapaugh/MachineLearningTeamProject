import numpy as np
from PIL import Image
import os
import cv2
import time as tm

# trims the image to a certain size, with a certain number of pieces in a row, the returns a numpy array where [0][0] is a piece, and 
# contains each pixel in the pieces rgb value. Recommend using a standardized value for dimensions_of_pixels and pieces_in_row so all 
# pieces are the same size and square. dimensions_of_pixels=1000 and pieces_in_row=10 seems to work well, leaves each piece with 
# 100x100 pixels (with 3 rgb values) in a puzzle with 100 pieces, 10x10.
def processImage(name, dimensions_of_pixels, pieces_in_row):
    image = Image.open(name)
    image = image.resize((dimensions_of_pixels,dimensions_of_pixels))
    arr = np.asarray(image)
    
    pixels_x = int(dimensions_of_pixels/pieces_in_row)
    pixels_y = int(dimensions_of_pixels/pieces_in_row)
    
    tiles = np.full((pieces_in_row,pieces_in_row,pixels_y,pixels_x,3),0)
    a = np.split(arr,pieces_in_row,axis=0) #splits image into the appropriately shaped rows
    a = np.array(a)
    for i in range(len(a)):
        tiles[i]=np.split(a[i],pieces_in_row,axis=1) #splits and saves the rows into appropriately shaped columns
    return tiles.astype(np.uint8) #must be type uint8 to show image
    
# runs the methods to gather all the data to train on, for however many sample there are. Make sure the location of the images is in the same 
# place as this program so os.listdir() can grab it. Returns nothing as all puzzle pieces are stored in a directory.
def processStoreAll():
    dimensions_of_pixels = 1000 #normal example
    pieces_in_row = 5 #normal example
    
    path = "Sample Images/"
    
    files = os.listdir(path)
    for i in files:
        if ".jpeg" not in i:
            files.remove(i)
    all_images = np.full((len(files), pieces_in_row, pieces_in_row, int(dimensions_of_pixels/pieces_in_row), int(dimensions_of_pixels/pieces_in_row), 3), 0)
    print("Getting data from", len(files), "different images")
            
    # for all of the sample images
    for i in range(len(files)):
        try:
            tiles = processImage(path + "sample_" + str(i) + ".jpeg", dimensions_of_pixels, pieces_in_row)
            all_images[i]=tiles
        except:
            pass
    return all_images.astype(np.uint8) #must be type uint8 to show image

all_images = processStoreAll()

# sample example:
print(all_images[0][0][0].shape)
image = Image.fromarray(all_images[0][0][0])
image.show()
